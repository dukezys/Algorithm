//使用DP数组
public class Main {
    public int Fibonacci(int n) {
        if(n <= 1)
            return n;
        int[] dp = new int[n + 1];
        dp[1] = 1;
        for(int i = 2; i <= n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
}

//使用两个指针pre1，pre2，节省了空间复杂度
public class Solution {
    public int Fibonacci(int n) {
        if(n <= 1)
            return n;
        int pre1 = 0;
        int pre2 = 1;
        int res = 0; 
        for(int i = 2; i <= n; i++){
            res = pre1 + pre2;
            pre1 = pre2;
            pre2 = res;
        }
        return res;
    }
}
//递归，时间复杂度较大
public class Solution {
    public int Fibonacci(int n) {
        if(n == 0)
            return 0;
        else if(n == 1)
            return 1;
        return Fibonacci(n-1) + Fibonacci(n-2);
    }
}
