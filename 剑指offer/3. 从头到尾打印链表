//常规递归
//在return后面 add，完成递归
import java.util.ArrayList;
public class Solution {
    private ArrayList<Integer> list = new ArrayList<>();
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {
        recursive(listNode);
        return list;
    }
    
    public void recursive(ListNode listNode){
        if(listNode == null)
            return;
        recursive(listNode.next);
        list.add(listNode.val);
    }
}

//Stack
import java.util.ArrayList;
import java.util.Stack;
public class Solution {
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {
        ArrayList<Integer> list = new ArrayList<>();
        Stack<Integer> stack = new Stack<>();
        while(listNode != null){
            stack.push(listNode.val);
            listNode = listNode.next;
        }
        while(!stack.isEmpty())
            list.add(stack.pop());
        
        return list;
        
    }
}

//使用头插法
import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {
        ListNode head = new ListNode(-1);
        while(listNode != null){
            ListNode memo = listNode.next;//备份原下节点
            listNode.next = head.next;//让ListNode指向之前自己的上一个节点
            head.next = listNode;//连接head和当前当前节点
            listNode = memo;//进行下一次循环操作
        }
        
        ArrayList<Integer> list = new ArrayList<>();
        head = head.next;
        while(head != null){
            list.add(head.val);
            head = head.next;
        }
        return list;
    }
}
