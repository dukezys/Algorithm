//设置前后两个指针，使用了两次循环
//这道题主要的目的是找到最低边界和最高边界
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int l = nums.length;
        int r = 0;
        for(int i = 0; i < nums.length - 1; i++){
            for(int j = i + 1; j < nums.length; j++){
                if(nums[j] < nums[i]){
                    r = Math.max(r, j);
                    l = Math.min(l, i);
                }
            }
        }
        
        return r - l < 0 ? 0 : r - l + 1;
    }
}

//使用Stack，核心思想也是找边界
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        Stack<Integer> stack = new Stack<Integer>();
        int l = nums.length;
        int r = 0;
        for(int i = 0; i < nums.length; i++){
            while(!stack.isEmpty() && nums[stack.peek()] > nums[i])
                l = Math.min(l, stack.pop());
            stack.push(i);
        }
        stack.clear();
        for(int i = nums.length - 1; i >= 0; i--){
            while(!stack.isEmpty() && nums[stack.peek()] < nums[i])
                r = Math.max(r, stack.pop());
            stack.push(i);
        }
        
        return r - l > 0 ? r - l + 1 : 0;
    }
}
