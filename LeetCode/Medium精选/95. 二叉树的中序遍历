/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 95. 二叉树的中序遍历
//递归方法
class Solution {
    public List<Integer> list;
    public List<Integer> inorderTraversal(TreeNode root) {
        list = new ArrayList<>();
        inorder(root);
        return list;
    }
    public void inorder(TreeNode root){
        if(root == null) return;
        inorder(root.left);
        list.add(root.val);
        inorder(root.right);
    }
}

//迭代，使用栈
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;
        while(curr != null || !stack.isEmpty()){
            //先遍历到最远的左子节点
            while(curr != null){
                stack.push(curr);
                curr = curr.left;
            }
            //弹出当前的左
            curr = stack.pop();
            //add进list
            list.add(curr.val);
            //既然无做节点，看是否有右节点，
            curr = curr.right;
        }
        return list;
    }
}

144.二叉树的前序遍历
class Solution {
    public List<Integer> list;
    public List<Integer> preorderTraversal(TreeNode root) {
        list = new ArrayList<>();
        preorder(root);
        return list;
    }
    public void preorder(TreeNode root){
        if(root == null) return;
        list.add(root.val);
        preorder(root.left);
        preorder(root.right);
    }
}

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;
        while(curr != null || !stack.isEmpty()){
            while(curr != null){
                list.add(curr.val);
                stack.push(curr);
                curr = curr.left;
            }
            curr = stack.pop().right;
        }
        return list;
    }
}

145.二叉树的后序遍历

public List<Integer> postorderTraversal2(TreeNode root) {
    List<Integer> res = new ArrayList<>();
    if (root == null) return res;
    Stack<TreeNode> stack = new Stack<>();
    stack.push(root);
    TreeNode pre = null;
    while (!stack.isEmpty()) {
        TreeNode cur = stack.peek();
        if ((cur.left == null && cur.right == null) || (pre != null && (cur.left == pre || cur.right == pre))) {
            //加入结果集
            res.add(cur.val);
            pre = cur;
            stack.pop();
        } else {
            //继续压栈，注意先右再左。
            if (cur.right != null) {
                stack.push(cur.right);
            }
            if (cur.left != null) {
                stack.push(cur.left);
            }
        }
    }
    return res;
}
