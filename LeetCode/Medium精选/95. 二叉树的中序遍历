/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//递归方法
class Solution {
    public List<Integer> list;
    public List<Integer> inorderTraversal(TreeNode root) {
        list = new ArrayList<>();
        inorder(root);
        return list;
    }
    public void inorder(TreeNode root){
        if(root == null) return;
        inorder(root.left);
        list.add(root.val);
        inorder(root.right);
    }
}

//迭代，使用栈
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;
        while(curr != null || !stack.isEmpty()){
            //先遍历到最远的左子节点
            while(curr != null){
                stack.push(curr);
                curr = curr.left;
            }
            //弹出当前的左
            curr = stack.pop();
            //add进list
            list.add(curr.val);
            //既然无做节点，看是否有右节点，
            curr = curr.right;
        }
        return list;
    }
}
