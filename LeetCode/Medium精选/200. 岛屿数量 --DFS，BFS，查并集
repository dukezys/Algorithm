//DFS--栈
class Solution {
    public int numIslands(char[][] grid) {
        int ans = 0;
        for(int i = 0; i < grid.length;i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == '1'){
                    dfs(i, j, grid);
                    ans += 1;
                }
            }
        }
        return ans;
    }
    
    public void dfs(int i, int j, char[][] grid){
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == '0')
            return;
        //把经历过的过的点都置为'0'
        grid[i][j] = '0';
        dfs(i+1, j, grid);
        dfs(i, j+1, grid);
        dfs(i-1, j, grid);
        dfs(i, j-1, grid);
    }
}

//BFS--队列
class Solution {
    public int numIslands(char[][] grid) {
        int ans = 0;
        for(int i = 0; i < grid.length;i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == '1'){
                    bfs(i, j, grid);
                    ans += 1;
                }
            }
        }
        return ans;
    }
    
    public void bfs(int i, int j, char[][] grid){
        Queue<int[]> list = new LinkedList<>();
        list.add(new int[]{i, j});
       while(!list.isEmpty()){
           int[] cur = list.remove();
           i = cur[0];
           j = cur[1];
           if(0 <= i && i < grid.length && 0 <= j && j < grid[0].length && grid[i][j] == '1') {
                grid[i][j] = '0';
                list.add(new int[] { i + 1, j });
                list.add(new int[] { i - 1, j });
                list.add(new int[] { i, j + 1 });
                list.add(new int[] { i, j - 1 });
            }
       }
    }
}
