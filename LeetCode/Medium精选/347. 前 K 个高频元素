//先用HashMap存储，再对HashMap的Entry进行排序，取k个
class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        if(k > nums.length || nums.length == 0)
            return new ArrayList<>();
        
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            if(!map.containsKey(nums[i]))
                map.put(nums[i], 1);
            else
                map.put(nums[i], map.get(nums[i]) + 1);
        }
        List<Map.Entry<Integer,Integer>> maplist = new ArrayList<>(map.entrySet());
        Collections.sort(maplist, new Comparator<Map.Entry<Integer,Integer>>(){
            public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o2){
                return -(o1.getValue().compareTo(o2.getValue()));
            }
        });
        
        List<Integer> list = new ArrayList<>();
        Iterator<Map.Entry<Integer,Integer>> iterator = maplist.iterator();
        for(Map.Entry<Integer,Integer> m : maplist){
            if(k > 0){
                list.add(m.getKey());
                k--;
            }
        }
            
        return list;
        
    }
}

//构建优先队列的方法

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
    // build hash map : character and how often it appears
    HashMap<Integer, Integer> count = new HashMap();
    for (int n: nums) {
      count.put(n, count.getOrDefault(n, 0) + 1);
    }

    // init heap 'the less frequent element first'
    PriorityQueue<Integer> heap =
            new PriorityQueue<Integer>((n1, n2) -> count.get(n1) - count.get(n2));

    // keep k top frequent elements in the heap
    for (int n: count.keySet()) {
      heap.add(n);
      if (heap.size() > k)
        heap.poll();
    }

    // build output list
    List<Integer> top_k = new LinkedList();
    while (!heap.isEmpty())
      top_k.add(heap.poll());
    Collections.reverse(top_k);
    return top_k;
  }

}
