//先排序，重写Comparator接口的compare方法，再根据当前最右边界和+1最右边界判断
class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> list = new ArrayList<>();
        if(intervals.length == 0 || intervals == null)
            return list.toArray(new int[0][]);
        Arrays.sort(intervals, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2){
                return o1[0] - o2[0];
            }
        });
        int i = 0;
        while(i < intervals.length){
            int left = intervals[i][0];
            int right = intervals[i][1];
            while(i < intervals.length - 1 && intervals[i+1][0] <= right){
                i++;
                right = Math.max(right, intervals[i][1]);
            }
            list.add(new int[]{left, right});
            i++;
        }
        return list.toArray(new int[0][]);
    }
}
