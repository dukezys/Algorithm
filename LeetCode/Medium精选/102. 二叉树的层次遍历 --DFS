/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //记录一个level，想当于每一层，递归遍历到相应层数时add进去
class Solution {
    private List<List<Integer>> list = new ArrayList<List<Integer>>();
    
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null) return list;
        dfs(root, 0);
        return list;
    }
    
    public void dfs(TreeNode node, int level){
        if(list.size() == level)
            list.add(new ArrayList<Integer>());
        list.get(level).add(node.val);
        
        if(node.left != null)
            dfs(node.left, level + 1);
        if(node.right != null)
            dfs(node.right, level + 1);
        
    }
}


//迭代，层次遍历
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null)
            return new ArrayList<List<Integer>>();
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        int level = 0;
        while(! queue.isEmpty()){
            //加入当前level的ArrayList
            ans.add(new ArrayList<Integer>());
            
            int length = queue.size();
            for(int i = 0; i < length; i++){
                TreeNode curr = queue.remove();
                
                ans.get(level).add(curr.val);
                if(curr.left != null)
                    queue.add(curr.left);
                if(curr.right != null)
                    queue.add(curr.right);
            }
            level++;
        }
        return ans;
    }
}
