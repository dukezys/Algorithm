class LRUCache {
    
    private static int capacity;
    
    private static Map<Integer, Integer> map = new HashMap<>();
    private static Queue<Integer> queue = new LinkedList<Integer>();

    public LRUCache(int capacity) {
        this.capacity = capacity;
    }
    
    public int get(int key) {
        if(map.containsKey(key)){
            update(key, map.get(key));
            return map.get(key);
        }
        else
            return -1;
    }
    
    public void put(int key, int value) {
        //当容量满了而且不是更新是插入时去掉最后一个放入
        if(queue.size() == capacity && (!map.containsKey(key))){
            queue.poll();
            map.put(key, value);
            queue.add(key);
        }
        else if(queue.size() < capacity && (!map.containsKey(key))){
            map.put(key,value);
            queue.add(key);
        }
        else
            update(key, value);
    }
    //更新
    public void update(int key, int value){
        map.put(key,value);
        Queue<Integer> newqueue = new LinkedList<>();
        int x = 0;
        do{
            x = queue.poll();//不知道为什么空指针异常
            newqueue.add(x);
        }while(x != key);
        while(queue.size() != 0)
            newqueue.add(queue.poll());
        newqueue.add(x);
        
        while(!newqueue.isEmpty())
            queue.add(newqueue.poll());
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
