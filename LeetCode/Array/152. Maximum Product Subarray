//首先确定使用dp解决本题，要确定max，min来找到最大连续字数组，因为用的是乘法
//其次max，min的值一直在变化，所以要设置result，来判断是变大了还是变小或不变。
class Solution {
    public int maxProduct(int[] nums) {
        if(nums == null || nums.length == 0)
            return 0;
        int n = nums.length;
        int max = nums[0];
        int min = nums[0];
        int result = nums[0];
        for(int i = 1; i < n; i++){
            int temp = max;
            max = Math.max(Math.max(max * nums[i],min * nums[i]), nums[i]);
            min = Math.min(Math.min(temp * nums[i], min*nums[i]), nums[i]);
            result = Math.max(result, max);
        }
        return result;
    }
}

//Better solution
//当当前数字为正数时，正常计算
//当当前数字为负数时，使用Math.max(min*nums[i], nums[i])计算当前最大的，因为如果当前min为负，curr也为负，则得正
class Solution {
    public int maxProduct(int[] nums) {
        if(nums == null || nums.length == 0)
            return 0;
        int n = nums.length;
        int max = nums[0];
        int min = nums[0];
        int result = nums[0];
        for(int i = 1; i < n; i++){
            if(nums[i] > 0){
                max = Math.max(max * nums[i], nums[i]);
                min = Math.min(min * nums[i], nums[i]);
            }
            else{
                int lmax = max;
                max = Math.max(min * nums[i], nums[i]);
                min = Math.min(lmax * nums[i], nums[i]);
            }
            result = Math.max(result, max);
        }
        return result;
    }
}
