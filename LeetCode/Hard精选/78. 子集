//使用二叉树的思想，每一个数都可以选可选和不选
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        //第一步，建立链表
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        ans.add(new ArrayList<Integer>());
        preorder(ans, list, nums, 0);
        return ans;
    }
    
    public void preorder(List<List<Integer>> ans, List<Integer> list, int[] nums, int i){
        if(i >= nums.length)
            return;
        list = new ArrayList<Integer>(list);
        
        ans.add(list);
        //加当前
        preorder(ans, list, nums, i + 1);
        list.add(nums[i]);
        //不加当前
        preorder(ans, list, nums, i + 1);
    }
}

//回溯
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        backtrack(0, nums, res, new ArrayList<Integer>());
        return res;

    }

    private void backtrack(int i, int[] nums, List<List<Integer>> res, ArrayList<Integer> tmp) {
        res.add(new ArrayList<>(tmp));
        for (int j = i; j < nums.length; j++) {
            tmp.add(nums[j]);
            backtrack(j + 1, nums, res, tmp);
            tmp.remove(tmp.size() - 1);
        }
    }
}
